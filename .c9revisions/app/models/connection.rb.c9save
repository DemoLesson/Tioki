{"ts":1354222541714,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class Connection < ActiveRecord::Base\n\tbelongs_to :user\n\tbelongs_to :owner, :foreign_key => :owned_by\n\tscope :not_pending, where(:pending => false)\n\n\t# Get information on my connections\n\tdef self.mine(args = {})\n\t\t\n\t\t# Set the user to lookup\n\t\ta = User.current.id if args[:user].nil?\n\t\ta = args[:user] unless args[:user].nil?\n\n\t\t# Get only the connections I instigated\n\t\tunless args[:creator].nil?\n\t\t\ttmp = self.where('`owned_by` = ?', a) if args[:creator]\n\t\t\ttmp = self.where('`user_id` = ?', a) unless args[:creator]\n\t\tend\n\n\t\t# Get all connections involving me\n\t\ttmp = self.where('`owned_by` = ? || `user_id` = ?', a, a) if args[:creator].nil?\n\n\t\t# Set pending true or false\n\t\ttmp = tmp.where('`pending` = ?', args[:pending]) unless args[:pending].nil?\n\n\t\t# Return the modified object\n\t\treturn tmp\n\tend\n\n\t# Get information on another user\n\tdef self.user(user_id)\n\t\tself.mine(:user => user_id, :pending => false)\n\tend\n\n\tdef self.find_for_user(user_id)\n\t\tConnection.find(:all, :conditions => ['owned_by = ?', user_id])\n\tend\n\n\tdef not_me(user_id = nil)\n\t\tbegin\n\t\t\tuser_id = User.current.id if user_id.nil?\n\t\t\tuser = User.find(self.owned_by.to_i == user_id.to_i ? self.user_id : self.owned_by)\n\t\trescue ActiveRecord::RecordNotFound => e\n\t\t\tself.destroy\n\t\t\treturn redirect_to request.path\n\t\tend\n\n\t\treturn user\n\tend\n\n\tdef owner\n\t\tUser.find(self.owned_by)\n\tend\n\n\tdef icreated?\n\t\tUser.current.id == self.owned_by ? true : false\n\tend\n\n\tdef self.add_connect(current_user_id, user_id)\n\n\t\t# Get users as A and B\n\t\ta = current_user_id\n\t\tb = user_id\n\n\t\t# Get a previous connection attempt\n\t\t@previous = Connection.where('(`owned_by` = ? && `user_id` = ?) || (`user_id` = ? && `owned_by` = ?)', a, b, a, b).first\n\n\t\t# If no previous one connect\n\t\tif @previous == nil\n\n\t\t\t# Create the connection\n\t\t\t@connection = Connection.new\n\t\t\t@connection.owned_by = current_user_id\n\t\t\t@connection.user_id = user_id\n\n\t\t\t# If everything saved ok\n\t\t\tif @connection.save\n\t\t\t\t\n\t\t\t\t# Notify the other user of my connection request\n\t\t\t\tUserMailer.userconnect(current_user_id, user_id).deliver\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\n\t\t# If this user did not instigate original connection go ahead and connect\n\t\telsif @previous.pending == true && @previous.user_id == a\n\t\t\t@previous.pending = false\n\n\t\t\tif @previous.save\n\t\t\t\tWhiteboard.createActivity(:connection, \"{user.teacher.profile_link} just connected with {tag.teacher.profile_link} you should too!\", User.find(a == @connect.user_id ? @connect.owned_by : @connect.user_id))\n\t\t\t\tself.log_analytic(:user_connection_accepted, \"Two users connection\", @previous)\n\n\t\t\t\treturn true\n\t\t\telse \n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":2678}]],"length":2678}
{"contributors":[],"silentsave":false,"ts":1354222830023,"patch":[[{"diffs":[[0," \"{user."],[-1,"teacher."],[0,"profile_"]],"start1":2338,"start2":2338,"length1":24,"length2":16},{"diffs":[[0,"tag."],[-1,"teacher."],[0,"prof"]],"start1":2381,"start2":2381,"length1":16,"length2":8}]],"length":2662,"saved":false}
