{"ts":1354221937108,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class UserMailer < ActionMailer::Base\n\tdefault :from => \"Tioki <tioki@tioki.com>\"\n\n\tdef teacher_welcome_email(user_id)\n\t\t@user = User.find(user_id)\n\t\t@teacher = Teacher.find_by_user_id(user_id)\n\n\t\t# Get ab test number\n\t\tab = Abtests.use(\"email:teacher_welcome\", 1).to_s\n\t\ttemplate \"teacher_welcome_email_\" + ab\n\n\t\tmail = mail(:to => @user.email, :subject => 'Welcome to Tioki!') do |f|\n\t\t\tf.html { render template }\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('teacher_welcome_email:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef teacher_welcome_email_temppassword(user_id, password)\n\t\t@user = User.find(user_id)\n\t\t@teacher = Teacher.find_by_user_id(user_id)\n\t\t@password = password\n\n\t\tmail = mail(:to => @user.email, :subject => 'Welcome to Tioki!')\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('teacher_welcome_email_temppassword')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef message_notification(user_id, subject, body, id, name)\n\t\t@user = User.find(user_id)\n\t\t@subject = subject\n\t\t@message_body = body[0,140]\n\t\t@id = id\n\t\t@sender_name = name\n\n\t\tmail = mail(:to => @user.email, :subject => name+' messaged you: '+subject)\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('message_notification')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef interview_notification(teacher_id, job_id)  \n\t\t@teacher = Teacher.find(teacher_id)\n\t\t@user = User.find(@teacher.user_id)\n\t\t@job = Job.find(job_id)\n\n\t\tmail = mail(:to => @user.email, :subject => 'You have a new interview request!')\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('interview_notification')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef userconnect(owner_id, user_id)\n\t\t@owner = User.find(owner_id)\n\t\t@user = User.find(user_id)\n\n\t\t# Get the proper AB Test string\n\t\tab = Abtests.use(\"email:userconnect\", 1).to_s\n\t\ttemplate = \"userconnect_\" + ab\n\n\t\tif ab == 0.to_s\n\t\t\tmail = mail(:to => @user.email, :subject => 'You have a new connection!') do |t|\n\t\t\t\tt.html { render template }\n\t\t\tend\n\t\telse\n\t\t\tmail = mail(:to => @user.email, :subject => \"Pending Tioki connection with #{@owner.name}!\") do |t|\n\t\t\t\tt.html { render template }\n\t\t\tend\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('userconnect:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\n\t# @Aleks look at this. It doesn't appear to be sending anything out.\n\tdef teacher_applied(school_id, job_id, teacher_id)\n\t\t@school = School.find(school_id)\n\t\t@admin_user = User.find(@school.owned_by)\n\n\t\t@job = Job.find(job_id)\n\t\t@teacher = Teacher.find(teacher_id)\n\t\t@teacher_user = User.find(@teacher.user_id)\n\n\t\tmessage_body = \"Please login to tioki.com to respond to this request.\"\n\t\tsubject = @teacher_user.name+' applied to your job posting: '+@job.title\n\n\t\tmail(:to => @admin_user.email, :subject => subject)\n\n\t\t@admins = SharedUsers.find(:all, :conditions => { :owned_by => @admin_user.id })\n\t\t@admins.each do |admin|\n\t\t\tshared =User.find(admin.user_id)\n\t\t\tif shared.is_limited ==false\n\t\t\t\tmail(:to => shared.email, :subject => subject)\n\t\t\tend\n\t\tend\n\n\t\t@limitedusers = SharedSchool.find(:all, :conditions => { :school_id => @school.id})\n\t\t@limitedusers.each do |limiteduser|\n\t\t\tshared = User.find(limiteduser.user_id)\n\t\t\tmail(:to => shared.email, :subject => subject)\n\t\tend\n\tend\n\n\t# @Aleks look at this. It doesn't appear to be sending anything out.\n\tdef interview_scheduled(user_id, job_id)\n\t\t@teacher_user = User.find(user_id)\n\n\t\t@job = Job.find(job_id)\n\t\t@school = School.find(@job.school_id)\n\t\t@admin_user = User.find(@school.owned_by)\n\n\t\tmessage_body = \"Please login to tioki.com to view your interviewee's request.\"\n\n\t\tmail(:to => @admin_user.email, :subject => @teacher_user.name+' has scheduled an interview', :body => message_body)\n\n\t\t@admins = SharedUsers.find(:all, :conditions => { :owned_by => @admin_user.id })\n\t\t@admins.each do |admin|\n\t\t\tshared =User.find(admin.user_id)\n\t\t\tif shared.is_limited ==false\n\t\t\t\tmail(:to => shared.email, :subject => @teacher_user.name+' has scheduled an interview', :body => message_body)\n\t\t\tend\n\t\tend\n\n\t\t@limitedusers = SharedSchool.find(:all, :conditions => { :school_id => @school.id})\n\t\t@limitedusers.each do |limiteduser|\n\t\t\tshared = User.find(limiteduser.user_id)\n\t\t\tmail(:to => shared.email, :subject => @teacher_user.name+' has scheduled an interview', :body => message_body)\n\t\tend\n\tend\n\n\tdef deliver_forgot_password(email, name, pass)\n\t\tmail = mail(:to => email, :subject => '[Tioki] Password Reset', :body => \"You have requested a password reset through our site. Your new password is:\\n\\n#{pass}\\n\\nPlease login and change it at your earliest convenience.\\n\\nRegards,\\nThe Tioki Team\\nhttp://tioki.com\")\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('deliver_forgot_password')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef send_passcode(name, email)\n\t\t@passcode = Passcode.find_by_given_out(nil)\n\t\t@passcode.given_out = true\n\t\t@passcode.sent_to = email\n\t\t@passcode.save!\n\n\t\tmail = mail(:to => email, :subject => 'Welcome to Tioki!', :body => \"Hello and Welcome to Tioki!\\n\\nWe are thrilled to give you access to our revolutionary online hiring platform and cannot wait for you to start building your very own Tioki profile! Below you will find your personalized code that will grant you access to the site, as well as important terms of service you are agreeing to by signing up as a beta tester.\\n\\n 1) In appreciation for signing up as a beta tester, we will grant you FREE access to our site through March 31, 2012!\\n\\n 2) Please note that the site you are accessing is a soft launch of the site and does not represent the final product. We will add additional features in the future to optimize your experience!\\n\\n 3) Once you are on the site, please be sure to check out our exemplar profile page (the link is in the \\\"Edit Profile\\\" section of the site).  Also, please take the time to participate in our beta user survey, which will be emailed to you after you access the platform.\\n\\n 4) By clicking on the link below, you agree that this is a private and individual code for beta-testing purposes and that it is NOT TO BE SHARED with others. By clicking on the link below, you will gain access to the site, and be directed to create your personal url:\\n\\nhttp://tioki.com/signup?passcode=#{@passcode.code}\\n\\nIf you have any questions or need additional support please contact us at support@tioki.com.\\n\\nAgain, welcome to Tioki! We look forward to working with you to meet all your job searching needs!\\n\\nThe Tioki Team\\n(323) 786-3366\\ninfo@tioki.com\")\n\n\t\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\t\tmail.delivery_method.tag('send_passcode')\n\t\t\tend\n\n\t\treturn mail\n\tend\n\n\t# INTERNAL\n\tdef beta_notification(name, email, userType, beta)    \n\t\tuserTypes = [ \"Teacher\", \"Teacher Assistant\", \"Student Teacher\", \"Administrator\" ]\n\n\t\tbetaProgram = 'Not a tester'\n\t\tif beta == true\n\t\t\tbetaProgram = \"Applied\"\n\t\t\tif userType == 1 || userType == 2 || userType == 3\n\t\t\t\tself.send_passcode(name, email).deliver\n\t\t\tend\n\t\tend\n\n\t\tmail = mail(:to => 'tioki@tioki.com', :subject => '[Tioki] New Beta Signup', :body => \"A new user has registered via the landing page.\\n\\nName: #{name}\\nEmail: #{email}\\n\\nUser Type: #{userTypes[userType-1]}\\nBeta Program: #{betaProgram}\")\n\n\t\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\t\tmail.delivery_method.tag('beta_notification')\n\t\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef refer_job_email(teachername, job_id, name, emails)\n\t\t@job = Job.find(job_id)\n\t\t@name = name\n\t\t@teachername = teachername\n\n\t\tsubject =  @teachername+' has referred you to a job, '+@job.title+' on Tioki!!'\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:refer_job\", 0).to_s\n\t\ttemplate = \"refer_job_\" + ab\n\n\t\t# Send out the email\n\t\tmail = mail(:to => emails, :subject => subject) do |f|\n\t\t\tf.html { render template }\n\t\tend\n\t\t#:body => \"Hi #{name}! \"+@teacher_user.name+\" wants you too check out the job, \"+@job.title+\", posted by \"+@job.school.name+\" on Demo Lesson! Click on the following link to view the job posting: http://www.demolesson.com/jobs/#{@job.id}\\n\\nIf you have any questions or need additional support please contact us at support@tioki.com.\")\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('refer_job_email:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\n\tend\n\n\tdef refer_site_email(teachername, emails, message, user = nil)\n\n\t\t# Set variables for use inside the email itself\n\t\t@teachername = teachername\n\t\t@message = message\n\n\t\t# Get the refering ID\n\t\t@referer = user.id unless user.nil?\n\n\t\t# Set the subject for the email\n\t\tsubject =  @teachername+' wants you to check out Tioki!'\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:refer_site_generic\", 1).to_s\n\t\ttemplate = \"refer_site_generic_\" + ab\n\n\t\t# Send out the email\n\t\tmail = mail(:to => emails, :subject => subject) do |f|\n\t\t\tf.html { render template }\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('refer_site_email:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef event_invite_email(teachername, emails, message, event, user = nil)\n\n\t\t# Set variables for use inside the email itself\n\t\t@teachername = teachername\n\t\t@message = message\n\n\t\t# Source the event itself\n\t\t@event = event\n\n\t\t# Get the refering ID\n\t\t@referer = user.id unless user.nil?\n\n\t\t# Set the subject for the email\n\t\tsubject =  @teachername+' wants you to check out an upcoming event on Tioki!'\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:event_invite\", 1).to_s\n\t\ttemplate = \"event_invite_\" + ab\n\n\t\t# Send out the email\n\t\tmail = mail(:to => emails, :subject => subject) do |f|\n\t\t\tf.html { render template }\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('event_invite_email:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\t\n\tdef group_invite_email(teachername, emails, message, group, user = nil)\n\n\t\t# Set variables for use inside the email itself\n\t\t@teachername = teachername\n\t\t@message = message\n\n\t\t# Source the event itself\n\t\t@group = group\n\n\t\t# Get the refering ID\n\t\t@referer = user.id unless user.nil?\n\n\t\t# Set the subject for the email\n\t\tsubject =  @teachername+' wants you to check out this Group on Tioki!'\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:group_invite\", 1).to_s\n\t\ttemplate = \"group_invite_\" + ab\n\n\t\t# Send out the email\n\t\tmail = mail(:to => emails, :subject => subject) do |f|\n\t\t\tf.html { render template }\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('group_invite_email:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\t\n\tdef discussion_invite_email(teachername, emails, message, discussion, user = nil)\n\n\t\t# Set variables for use inside the email itself\n\t\t@teachername = teachername\n\t\t@message = message\n\n\t\t# Source the discussion itself\n\t\t@discussion = discussion\n\n\t\t# Get the refering ID\n\t\t@referer = user.id unless user.nil?\n\n\t\t# Set the subject for the email\n\t\tsubject =  @teachername+' wants you to check out this Discussion on Tioki!'\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:discussion_invite\", 1).to_s\n\t\ttemplate = \"discussion_invite_\" + ab\n\n\t\t# Send out the email\n\t\tmail = mail(:to => emails, :subject => subject) do |f|\n\t\t\tf.html { render template }\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('discussion_invite_email:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\n\t# @Aleks don't think these are being sent\n\tdef school_signup_email(name, schoolname, email, phonenumber, school)\n\t\t@name = name\n\t\t@schoolname = schoolname\n\t\t@email = email\n\t\t@phonenumber = phonenumber\n\n\t\tsubject =  @schoolname+' just signed up to Tioki for a free trial, please contact them to discuss their free trial.'\n\t\tbody = \"Name:\"+@name+\"\\n\\nSchool name:\"+@schoolname+\"\\n\\nPhone Number:\"+@phonenumber+\"\\n\\nhttp://www.tioki.com/schools/\"+school.id.to_s\n\n\t\tmail(:to => 'schumacher.hodge@tioki.com', :subject => subject, :body => body)\n\t\tmail(:to => 'support@tioki.com', :subject => subject, :body => body)\n\tend\n\n\tdef rejection_notification(teacher_id, job_id, name)  \n\t\t@teacher = Teacher.find(teacher_id)\n\t\t@job = Job.find(job_id)\n\t\t@user = User.find(@teacher.user_id)\n\t\t@school = School.find(@job.school_id)\n\t\t@admin_user = User.find(@school.owned_by)\n\n\t\tmail = mail(:to => @user.email, :subject => 'Your application status has changed.')\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('rejection_notification')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef weeklyemail(teacher)\n\t\t@teacher=teacher\n\t\t#keywords for finding grades\n\t\tgradestring=[\"K\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\", \"elementary\", \"middle\", \"high\",\"pre\", \"adult\"]\n\n\t\t#must have emails enabled, be currently teacher\n\t\t#Still testing so emails are going to elijahgreen@gmail.com only\n\t\ttup = SmartTuple.new(\" AND \")\n\t\ttup << [\"jobs.created_at > ?\", Date.today- 7.days]\n\n\t\tif teacher.seeking_location.present?\n\t\t\t#A loaction is a specific point in that location so a radius is needed.\n\t\t\t#Currently a 25 miles radius\n\t\t\tschools = School.near( teacher.seeking_location, 25).collect(&:id)\n\n\t\t\t#if no schools go to next teacher\n\t\t\tif schools.size == 0\n\t\t\t\treturn\n\t\t\telse\n\t\t\t\t@jobs = Job.is_active.where(:school_id => schools).is_active.find(:all, :conditions => tup.compile)\n\t\t\tend\n\t\telse\n\t\t\t@jobs = Job.is_active.find(:all, :conditions => tup.compile)\n\t\tend\n\n\t\tif teacher.seeking_grade.present?\n\t\t\tjobarray = []\n\n\t\t\t#Elementary grades, K-6\n\t\t\tif gradestring[0..6].any? { |str| teacher.seeking_grade.include? str } || teacher.seeking_grade.downcase.include?(\"elementary\")\n\t\t\t\t#2=elementary,7=K-6,8=K-8,10=K-12\n\t\t\t\tjobarray+=@jobs.select { |job| job.school.grades == 2 || job.school.grades == 8 || job.school.grades == 10 }\n\t\t\tend\n\n\t\t\t#Middle grades, 6-8 \n\t\t\tif gradestring[6..8].any? { |str| teacher.seeking_grade.include? str } || teacher.seeking_grade.downcase.include?(\"middle\")\n\t\t\t\t#3=middle,8=K-8,9=6-12, 10=K-12\n\t\t\t\tjobarray+=@jobs.select { |job| job.school.grades == 3 || job.school.grades == 8 || job.school.grades == 9 || job.school.grades == 10 }\n\t\t\tend\n\n\t\t\t#High school grades, K-12\n\t\t\tif gradestring[9..12].any? { |str| teacher.seeking_grade.include? str } || teacher.seeking_grade.downcase.include?(\"high\")\n\t\t\t\t#10=K-12, 9=6-12, 4 = high school\n\t\t\t\tjobarray+=@jobs.select { |job| job.school.grades == 9 || job.school.grades == 10 || job.school.grades == 4 }\n\t\t\tend\n\n\t\t\t#Pre-school\n\t\t\tif teacher.seeking_grade.downcase.include?(\"pre\")\n\t\t\t\t#1=pre-K\n\t\t\t\tjobarray+=@jobs.select { |job| job.school.grades == 1 }\n\t\t\tend\n\n\t\t\t#Adult School\n\t\t\tif teacher.seeking_grade.downcase.include?(\"adult\")\n\t\t\t\tjobarray+=@jobs.select { |job| job.school.grades == 5 }\n\t\t\tend\n\n\t\t\t@jobs=jobarray.uniq\n\t\tend\n\n\t\tif teacher.seeking_subject.present?\n\t\t\t#select subjects whose names is in seeking_subject\n\t\t\t@subjects=Subject.all.select { |subject| teacher.seeking_subject.include? subject.name }\n\n\t\t\tjobarray = []\n\n\t\t\t#any jobs with a particular subject is added to the array, because of this there are possibly duplicates\n\t\t\t@subjects.each do |subject|\n\t\t\t\tjobarray+=@jobs.select{ |job| JobsSubjects.find(:first, :conditions => [ \"job_id = ? AND subject_id = ?\", job.id, subject.id]) != nil }\n\t\t\tend\n\t\t\t#make sure that every job of the jobs array is unique\n\t\t\t@jobs=jobarray.uniq\n\t\tend\n\n\t\tif @jobs.size > 0\n\t\t\tmail = mail(:to => teacher.user.email, :subject => \"New job postings at tioki.com\")\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('weeklyemail')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef vouch_request(voucheename, vouchername, emails, url)\n\t\t@url = url\n\t\t@teachername = voucheename\n\t\t@name = vouchername\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:vouch_request\", 1).to_s\n\t\ttemplate = \"vouch_request_\" + ab\n\n\t\t# Send out the email\n\t\tmail = mail(:to => emails, :subject => @teachername + \" has requested to verify their skills on Tioki\") do |f|\n\t\t\tf.html { render template }\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('vouch_request:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef connection_invite(user, emails, url, message)\n\t\t@teachername=user.name\n\t\t@url= url\n\t\t@message= message\n\t\t@user=user\n\n\t\t# Which template to use\n\t\tab = Abtests.use(\"email:connection_invite\", 1).to_s\n\t\ttemplate = \"connection_invite_\" + ab\n\n\t\t# Send out the email\n\t\t# Use new subject lines\n\t\tif ab == 0.to_s\n\t\t\tmail = mail(:to => emails, :subject => @teachername + \" wants you to checkout Tioki!\") do |f|\n\t\t\t\tf.html { render template }\n\t\t\tend\n\t\telse\n\t\t\tmail = mail(:to => emails, :subject => @teachername + \" wants to connect on Tioki!\") do |f|\n\t\t\t\tf.html { render template }\n\t\t\tend\n\t\tend\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('connection_invite:ab-' + ab)\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef five_referrals(email)\n\t\tmail = mail(:to => email, :subject => 'Congratulations!')\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('five_referrals')\n\t\tend\n\n\t\treturn mail\n\tend\n\n\tdef skills_vouched(vouchee_id, voucher_id, start_time)\n\t\tvouchee = User.find(vouchee_id)\n\t\tvoucher = User.find(voucher_id)\n\t\temail = vouchee.email\n\t\t@profile_name = vouchee.teacher.url\n\t\t@vouched_skills = VouchedSkill.find(:all, :conditions => [\"user_id = ? && voucher_id = ? && created_at >= ?\", vouchee.id, voucher.id, start_time], :limit => 6)\n\t\t@sender_name = voucher.name\n\t\t@receiver_name = vouchee.name\n\n\t\tab = Abtests.use(\"email:skills_vouched\",1)\n\t\tif ab == 0\n\t\t\tsubject = @sender_name + \" has vouched for your skills.\"\n\t\telse\n\t\t\tsubject = @sender_name + \" thinks you have amazing skills.\"\n\t\tend\n\t\tmail = mail(:to => email, :subject => @sender_name + \" has vouched for your skills.\")\n\n\t\tif mail.delivery_method.respond_to?('tag')\n\t\t\tmail.delivery_method.tag('skill_vouched:ab-' + ab.to_s)\n\t\tend\n\n\t\treturn mail\n\tend\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":17649}]],"length":17649}
{"contributors":[],"silentsave":false,"ts":1354223614472,"patch":[[{"diffs":[[0,"_id)"],[-1,"\n\t\t@teacher = Teacher.find_by_user_id(user_id)"],[0,"\n\n\t\t"]],"start1":143,"start2":143,"length1":54,"length2":8},{"diffs":[[0,"id)\n"],[-1,"\t\t@teacher = Teacher.find_by_user_id(user_id)\n"],[0,"\t\t@p"]],"start1":595,"start2":595,"length1":54,"length2":8},{"diffs":[[0,"ew_notification("],[-1,"teach"],[1,"us"],[0,"er_id, job_id)  "]],"start1":1218,"start2":1218,"length1":37,"length2":34},{"diffs":[[0,")  \n"],[-1,"\t\t@teacher = Teacher.find(teacher_id)\n"],[0,"\t\t@u"]],"start1":1249,"start2":1249,"length1":46,"length2":8},{"diffs":[[0,"= User.find("],[-1,"@teacher."],[0,"user_id)\n\t\t@"]],"start1":1261,"start2":1261,"length1":33,"length2":24},{"diffs":[[0,"job_id, "],[-1,"teach"],[1,"us"],[0,"er_id)\n\t"]],"start1":2253,"start2":2253,"length1":21,"length2":18},{"diffs":[[0,"\n\t\t@"],[-1,"teacher = Teacher.find(teacher_id)\n\t\t@teacher_"],[0,"user"]],"start1":2375,"start2":2375,"length1":54,"length2":8},{"diffs":[[0,"= User.find("],[-1,"@teacher."],[0,"user_id)\n\n\t\t"]],"start1":2384,"start2":2384,"length1":33,"length2":24},{"diffs":[[0,"ject = @"],[-1,"teacher_"],[0,"user.nam"]],"start1":2484,"start2":2484,"length1":24,"length2":16},{"diffs":[[0,"ser.name"],[-1,"+"],[1," + "],[0,"' applie"]],"start1":2493,"start2":2493,"length1":17,"length2":19},{"diffs":[[0,"sting: '"],[-1,"+"],[1," + "],[0,"@job.tit"]],"start1":2528,"start2":2528,"length1":17,"length2":19},{"diffs":[[0,"_id)\n\t\t@"],[-1,"teacher_"],[0,""],[1,""],[0,"user = U"]],"start1":3184,"start2":3184,"length1":24,"length2":16},{"diffs":[[0,"subject => @"],[-1,"teacher_"],[0,""],[1,""],[0,"user.name+' "]],"start1":3446,"start2":3446,"length1":32,"length2":24},{"diffs":[[0,"subject => @"],[-1,"teacher_"],[0,""],[1,""],[0,"user.name+' "]],"start1":3731,"start2":3731,"length1":32,"length2":24},{"diffs":[[0,"ect => @"],[-1,"teacher_"],[0,""],[1,""],[0,"user.nam"]],"start1":4022,"start2":4022,"length1":24,"length2":16},{"diffs":[[0,"@teacher"],[-1,"_user."],[0,""],[1,""],[0,"name+\" w"]],"start1":7588,"start2":7588,"length1":22,"length2":16},{"diffs":[[0,"ication("],[-1,"teach"],[1,"us"],[0,"er_id, j"]],"start1":11655,"start2":11655,"length1":21,"length2":18},{"diffs":[[0,"\n\t\t@"],[-1,"teacher = Teach"],[1,"user = Us"],[0,"er.find("],[-1,"teach"],[1,"us"],[0,"er_i"]],"start1":11687,"start2":11687,"length1":36,"length2":27},{"diffs":[[0,"id)\n"],[-1,"\t\t@user = User.find(@teacher.user_id)\n"],[0,"\t\t@s"]],"start1":11739,"start2":11739,"length1":46,"length2":8},{"diffs":[[0,"ail("],[-1,"teach"],[1,"us"],[0,"er)\n\t\t@"],[-1,"teacher=teach"],[1,"user=us"],[0,"er\n\t"]],"start1":12054,"start2":12054,"length1":33,"length2":24},{"diffs":[[0,"days]\n\n\t\tif "],[-1,"teach"],[1,"!us"],[0,"er.seeking_l"]],"start1":12423,"start2":12423,"length1":29,"length2":27},{"diffs":[[0,"king"],[-1,"_"],[1,"['"],[0,"location"],[-1,".present"],[1,"'].nil"],[0,"?\n\t\t"]],"start1":12444,"start2":12444,"length1":25,"length2":24},{"diffs":[[0,"l.near( "],[-1,"teach"],[1,"us"],[0,"er.seeki"]],"start1":12591,"start2":12591,"length1":21,"length2":18},{"diffs":[[0,"king"],[-1,"_"],[1,"['"],[0,"location"],[1,"']"],[0,", 25"]],"start1":12607,"start2":12607,"length1":17,"length2":20},{"diffs":[[0,"le)\n\t\tend\n\n\t\tif "],[-1,"teach"],[1,"!us"],[0,"er.seeking_grade"]],"start1":12902,"start2":12902,"length1":37,"length2":35},{"diffs":[[0,"king"],[-1,"_"],[1,"['"],[0,"grade"],[-1,".present"],[1,"'].nil"],[0,"?\n\t\t"]],"start1":12927,"start2":12927,"length1":22,"length2":21}]],"length":17342,"saved":false}
{"ts":1354224032415,"patch":[[{"diffs":[[0,"6].any? { |str| "],[-1,"teach"],[1,"us"],[0,"er.seeking_grade"]],"start1":13012,"start2":13012,"length1":37,"length2":34},{"diffs":[[0,"tr| user.seeking"],[-1,"_"],[1,"['"],[0,"grade"],[1,"']"],[0,".include? str } "]],"start1":13024,"start2":13024,"length1":38,"length2":41},{"diffs":[[0,"clude? str } || "],[-1,"teach"],[1,"us"],[0,"er.seeking_grade"]],"start1":13052,"start2":13052,"length1":37,"length2":34},{"diffs":[[0," || user.seeking"],[-1,"_"],[1,"['"],[0,"grade"],[1,"']"],[0,".downcase.includ"]],"start1":13064,"start2":13064,"length1":38,"length2":41},{"diffs":[[0,"8].any? { |str| "],[-1,"teach"],[1,"us"],[0,"er.seeking_grade"]],"start1":13326,"start2":13326,"length1":37,"length2":34},{"diffs":[[0,"tr| user.seeking"],[-1,"_"],[1,"['"],[0,"grade"],[1,"']"],[0,".include? str } "]],"start1":13338,"start2":13338,"length1":38,"length2":41},{"diffs":[[0,"clude? str } || "],[-1,"teach"],[1,"us"],[0,"er.seeking_grade"]],"start1":13366,"start2":13366,"length1":37,"length2":34},{"diffs":[[0," || user.seeking"],[-1,"_"],[1,".['"],[0,"grade"],[1,"']"],[0,".downcase.includ"]],"start1":13378,"start2":13378,"length1":38,"length2":42},{"diffs":[[0,"{ |str| "],[-1,"teach"],[1,"us"],[0,"er.seeki"]],"start1":13675,"start2":13675,"length1":21,"length2":18},{"diffs":[[0,".seeking"],[-1,"_"],[1,".['"],[0,"grade"],[1,"']"],[0,".include"]],"start1":13687,"start2":13687,"length1":22,"length2":26},{"diffs":[[0,"tr } || "],[-1,"teach"],[1,"us"],[0,"er.seeki"]],"start1":13716,"start2":13716,"length1":21,"length2":18},{"diffs":[[0," || user.seeking"],[-1,"_"],[1,".['"],[0,"grade"],[1,"']"],[0,".downcase.includ"]],"start1":13720,"start2":13720,"length1":38,"length2":42},{"diffs":[[0,"re-school\n\t\t\tif "],[-1,"teach"],[1,"us"],[0,"er.seeking_grade"]],"start1":13937,"start2":13937,"length1":37,"length2":34},{"diffs":[[0,"\tif user.seeking"],[-1,"_"],[1,".['"],[0,"grade"],[1,"']"],[0,".downcase.includ"]],"start1":13949,"start2":13949,"length1":38,"length2":42},{"diffs":[[0,"chool\n\t\t\tif "],[-1,"teach"],[1,"us"],[0,"er.seeking_g"]],"start1":14093,"start2":14093,"length1":29,"length2":26},{"diffs":[[0,"king"],[-1,"_"],[1,"['"],[0,"grade"],[1,"']"],[0,".dow"]],"start1":14113,"start2":14113,"length1":14,"length2":17},{"diffs":[[0,"d\n\n\t\tif "],[-1,"teach"],[1,"us"],[0,"er.seeki"]],"start1":14249,"start2":14249,"length1":21,"length2":18},{"diffs":[[0,".seeking"],[-1,"_"],[1,"['"],[0,"subject"],[1,"']"],[0,".present"]],"start1":14261,"start2":14261,"length1":24,"length2":27},{"diffs":[[0,"ubject| "],[-1,"teach"],[1,"us"],[0,"er.seeki"]],"start1":14380,"start2":14380,"length1":21,"length2":18},{"diffs":[[0,".seeking"],[-1,"_"],[1,"['"],[0,"subject"],[1,"']"],[0,".include"]],"start1":14392,"start2":14392,"length1":24,"length2":27},{"diffs":[[0,"ize > 0\n"],[1,""],[0,"\t\t\tmail "]],"start1":14840,"start2":14840,"length1":16,"length2":16},{"diffs":[[0,"(:to => "],[-1,"teacher."],[0,"user.ema"]],"start1":14862,"start2":14862,"length1":24,"length2":16}]],"length":17338,"saved":false}
