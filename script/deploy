#!/usr/bin/env ruby

# # # # # # # # # # # # #
# Tioki Deploy Script   #
#  Author: Kelly Becker #
# # # # # # # # # # # # #

# Load serialization engine
require 'yaml'
require 'socket'

# Start by getting the command line arguments
CLIargs = ARGV

# Get the command to run
command = CLIargs.shift

# Debug
if CLIargs.first == '--debug'
	CLIargs.shift
	debug = true
else
	debug = false
end

# Output to terminal
def echo(text, color = 'green', _sleep = nil)
	color_code = "31" if color == 'red'
	color_code = "32" if color == 'green'
	puts "\e[#{color_code}m#{text}\e[0m"
	sleep _sleep unless _sleep.nil? || !_sleep.is_a?(Integer)
end

# Confirm the message
def confirm(text, color = 'red')
	echo text + " [y/N]", color
	yesno = STDIN.gets.chomp
	if !yesno.empty? && yesno[0].downcase == "y"
		return true
	else
		return false
	end
end

# Get input
def input(text, color = 'red', default = nil)
	echo text, color
	var = STDIN.gets.chomp
	var = default if !default.nil? && (var.nil? || var.empty?)
	return var
end

# Make sure we are in the root directory
unless File.directory? './.git'
	echo 'You are not running from the rails root!', 'red'
	echo 'Exiting...'
	exit
end

# Handle version bumping
def versionBump(type = 'revision', save = false)

	# Get the version
	versionFile = File.open('./.version', "rb")
	version = versionFile.read.strip

	# Get the version from the file
	major, minor, revision = version.split('.')

	# Turn the version into integers
	revision = revision.to_i
	minor = minor.to_i
	major = major.to_i

	# Bump the release
	if type == 'revision'
		revision += 1
	elsif type == 'minor'
		revision = 0
		minor += 1
	elsif type == 'major'
		revision = 0
		minor = 0
		major += 1
	end

	# Reassemble new version
	version = "#{major}.#{minor}.#{revision}"

	# Save the version
	if save
		File.open('./.version', "w+") do |f|
			f.write(version)
		end
	end

	# Return the version
	return version
end

# Generate Seednote Message
def seedNoteMessage(version = nil)
	message = Hash.new
	message[:author] = `git config user.name`.strip
	message[:lastBump] = `git log --pretty=format:"%h" -1 -- .version`.strip
	message[:commits] = `git log --pretty=format:"* %h: %an - %s" --no-merges "#{message[:lastBump]}"..HEAD`.strip
	
	headline = version.nil? ? "" : "v#{version} - "
	headline << Time.now.strftime("%b %-m, %Y %l:%M%p ")
	headline << "deployed by " + message[:author]

	output = Array.new
	output << headline
	output << String.new.ljust(headline.length, "=")
	output << message[:commits]

	return output.join("\n") + "\n\n"
end

def prependToSeedNote(message = nil)
	return if message.nil?

	# Files
	original_file = './SEED_NOTES.md'
	new_file = original_file + '.tmp'

	# Create new file
	File.open(new_file, 'w') do |f|
	  f.puts message
	  File.foreach(original_file){|l| f.puts l}
	end

	# Delete and Rename
	File.delete(original_file)
	File.rename(new_file, original_file)

	return true
end

# Stop Deploy Exception
class StopDeploy < StandardError
end

class DeployCLI

	def update(type = "staging")
		# Show Tioki
		show_tioki

		# Capture terminal logs
		logs = Array.new

		# Did we merge into master
		masterMerge = false

		# Get the current branch and tracked remote
		branch = `git name-rev --name-only HEAD`.strip
		remote = `git config "branch.#{branch}.remote"`.strip
		commited = `git status --porcelain`.strip.empty?

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Make sure we want to be deploying with uncommited changes
		unless commited
			return unless confirm("You are trying to deploy with uncommited files. Continue?")

		# Push any unpushed changes to the remote
		else
			system("git push #{remote} #{branch}")
		end

		# If we are in develop ask if we would like to merge to master
		if commited && branch == 'develop' && confirm("Would you like to tag and release?")

			# Determine the release type
			type = input("Is this a 'revision', 'minor', or 'major' release. [revision]", 'red', 'revision')

			# Get the bumped version
			if type == 'revision' || type == 'minor' || type == 'major'
				tag = versionBump(type, false)
			end

			if (!tag.nil? || !tag.empty?) && confirm("Tagging and releasing version \"#{tag}\" is this ok? If not we will deploy without a tag.")

				# Add data to Seednote
				echo "Generating default seednote..."
				prependToSeedNote(seedNoteMessage(tag))

				# Seed note edit?
				if confirm "\nWould you like to add to the SEED_NOTES.md file?"
					editor = ENV['EDITOR'] || ENV['GIT_EDITOR']

					if editor.nil? || editor.empty?
						editor = input "What editor should I use? (ex. vi, nano, mate, subl)"
						
						# If Sublime or Texmate add waits
						case editor
						when 'subl', 'sublime', 'sublimetext', 'sublimetext2'
							editor = 'subl -n -w'
						when 'mate', 'textmate', 'text mate' 'textmate2'
							editor = 'mate -w'
						end
					else
						echo "Opening the default system editor...\n"
					end

					# Open editor
					echo "Waiting for editing to complete...\n", 'red'
					system(editor + " ./SEED_NOTES.md")
				end

				# Stop the deploy
				unless confirm "Continue with deploy? If you attempt to stop if after this point bad things might happen."
					echo "Resetting the seed note."
					system('git reset --hard HEAD')
					raise StandardError, "Stop the deploy"
				end

				# Commit seednote
				echo "Commiting updated seednote..."
				system('git add ./SEED_NOTES.md')
				system('git commit -m "Updated Seednote"')

				# Push the updated seed note to the currently tracked branch
				echo "Pushing updated seednote commit to GitHub (#{remote}/#{branch})..."
				system("git push #{remote} #{branch}")

				# Done pushing
				echo "Done pushing seednote..."

				# Bump the verion
				versionBump(type, true)

				# Commit seednote
				echo "\nVersion bump to #{tag}..."
				system('git add ./.version')
				system("git commit -m 'Version bump to #{tag}'")
				system("git push #{remote} #{branch}")

				# Merging master
				echo "\nSwitching to master..."
				system('git checkout master')
				echo "\nPulling master..."
				system("git pull -u #{remote} master")
				echo "\nMerging in changes from develop..."
				system('git merge develop')
				echo "Merge completed...\n"
				system("git push -u #{remote} master")

				# Create the tag
				echo "\nCreating tag..."
				system("git tag -a #{tag} -m 'version #{tag}'")

				# Push the tag
				echo "\nPushing tags..."
				system("git push #{remote} --tags")

				# Finished tags
				echo "\nFinished creating tag."
			else
				# Merge master
				echo "\nSwitching to master..."
				system('git checkout master')
				echo "\nPulling master..."
				system("git pull -u #{remote} master")
				echo "\nMerging in changes from develop..."
				system('git merge develop')
				echo "Merge completed...\n"
				system("git push -u #{remote} master")
			end

			# Continue
			echo "\nContinuing with deploy...\n"
			masterMerge = true
		end

		# Ask if we would like to bootstrap the boxes
		if confirm "Would you like to bootstrap the boxes? (Update OS and Main Gems)"
			echo "Bootstrapping the EC2 instances."
			echo "(Installing new Software/Gems)"
			echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
			echo "This may take awhile...\n"
			system('cap rubber:bootstrap FILTER=-tools')
		end

		# Deploy the code run assets
		echo "\nCopying the rails app to the server and deploying."
		echo "(Runs rake assets:precompile on finish)"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"
		system('cap deploy:cold FILTER=-tools')

		# Run DB Migrate
		echo "\nMigrating database"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"
		system('COMMAND="db:migrate" cap rubber:rake FILTER=-tools')

		# Chmod jCrop upload dir
		echo "\nChmodding jCrop Upload Directory"
		system('CHMOD="0777 ./public/uploads" cap rubber:chmod FILTER=-tools')

		# Launch new code
		echo "\nThe new code is on the server and everything is ready to go."
		if confirm "Would you like to publish now?"
			echo "This may take awhile...\n"
			system('cap deploy:create_symlink FILTER=-tools')
			system('cap rubber:passenger_nginx:restart FILTER=-tools')
			echo "The new code is now live. You can rollback by running:"
			echo "\`./script/deploy rollback #{type}\`", 'red'
		else
			echo "\nYou can deploy later with:"
			echo "\`./script/deploy publish #{type}\`", 'red'
		end

		# If we are in master go back to develop
		if masterMerge
			echo "\nSwitching back to develop branch..."
			system('git checkout develop')
		end

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment

		show_cat
	end

	def publish(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Notice
		echo "Publishing the latest revision of code on all #{type} servers."
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"

		# Do It Now
		system('cap deploy:create_symlink FILTER=-tools')
		system('cap rubber:passenger_nginx:restart FILTER=-tools')

		# Remind
		echo "\nThe new code is now live. You can rollback by running:"
		echo "\`./script/deploy rollback #{type}\`", 'red'

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def rollback(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Notice
		echo "Rolling back to the last published code bade on all #{type} servers."
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"

		# Do It Now
		system('cap deploy:rollback:code FILTER=-tools')
		system('cap rubber:passenger_nginx:restart FILTER=-tools')

		# Notify
		echo "\nThe old code is now live."

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def create_staging
		return self.create('staging', nil)
	end

	def create(type = 'staging', _alias = nil)

		# Set alias if nil
		_alias = 'staging_' + Socket.gethostname + '_' + Time.now.to_i.to_s[-4,4].gsub('.','') if _alias.nil?

		# Capture terminal logs
		logs = Array.new

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Boot strap the boxes
		echo "Bootstrapping/Launching the EC2 instances."
		echo "(Creating Server, Installing new Software/Gems, Compiling assets, Migrating DB)"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"
		ENV['ALIAS'] = _alias
		ENV['ROLES'] = 'web,app,db:primary=false'
		system('cap rubber:create')
		system('cap rubber:bootstrap FILTER=-tools')
		system('cap deploy:cold FILTER=-tools')

		# Restore the original rails env
		echo "\n\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment

		# Write to log
		dir = File.expand_path(File.dirname(__FILE__)) + '/deploy_logs'
		Dir.mkdir(dir) unless File.exists?(dir)
		File.open(dir + "/create_staging_#{type}_#{Time.now.to_i}", 'w') do |f|
			f.write(YAML::dump(logs))
		end
	end

	def logs(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Explain Exit
		echo "Type (CTRL + C) to exit when you are done", 'red', 2

		# Tail the logs
		system('cap rubber:tail_logs FILTER=-tools')

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def destroy
		echo "If you really want to destroy a server please do it manually.", 'red'
	end

	def setup

		# Warn
		echo "Ok were gonna install the latest rubber, bundle install, and then sync aliases ^_^"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "Here we go! This could take awhile...\n"

		# Install specific install
		system('sudo gem install specific_install')

		# Install Rubber
		system('sudo gem specific_install -l git://github.com/wr0ngway/rubber.git')

		# Bundle Install
		system('bundle install && bundle update')

		# Sync aliases
		renvironment = ENV['RAILS_ENV']
		['development', 'staging','production'].each do |_env|
			ENV["RAILS_ENV"] = _env
			system('cap rubber:setup_local_aliases')
		end; ENV["RAILS_ENV"] = renvironment

		echo "That should be everything! ^_^"
	end

	def prep

		# Warn
		echo "Ok so were gonna bundle install your Gemfile and rake assets and db migrate. Lets go!"
		if confirm "Everything sound good?"

			# Bundle Install/Update
			system('bundle install && bundle update')

			# Rake Assets
			system('rake assets:precompile')

			# Rake DB
			system('rake db:migrate')

			echo "\nFinished Prep...", 'red'
		else
			echo "\nCancelled...", 'red'
		end
	end

	def rake(type = 'staging', command = nil)

		# If no command given then exit
		return echo "No rake task given." if command.nil? || !command.is_a?(String)

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		if confirm "Confirm you want to run \`rake #{command}\`..."
			ENV["COMMAND"] = command
			system('cap rubber:rake FILTER=-tools')
			echo "\nFinished..."
		else
			echo "\nCancelled..."
		end

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def memory(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Run command
		ENV["COMMAND"] = "free -t -m | grep \"Total\" | awk '{ print \"Total Memory space : \"$2 \" MB\";print \"Used Memory Space : \"$3\" MB\";print \"Free Memory : \"$4\" MB\";}'"
		system('cap invoke')

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def show_cat
		# Show cat
		cat = <<-CAT
        
                _                        
                \\`*-.                    
                 )  _`-.                 
                .  : `. .                
                : _   '  \\               
                ; *` _.   `*-._          
                `-.-'          `-.       
                  ;       `       `.     
                  :.       .        \\    
                  . \\  .   :   .-'   .   
                  '  `+.;  ;  '      :   
                  :  '  |    ;       ;-. 
                  ; '   : :`-:     _.`* ;
         [bug] .*' /  .*' ; .*`- +'  `*' 
               `*-*   `*-*  `*-*'        
		CAT
		echo cat, nil
	end

	def show_tioki
		# Show tioki
		tioki = <<-TIOKI
        
        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
        #                                                                     #
        #        ____       ____    _____________________________    ____     #
        #       |    |     |    |  |                             |  |    |    #
        #       |    |     |____|  |_____________________________|  |____|    #
        #       |    |                                                        #
        #    ___|    |__    ____       ______       ____     ____    ____     #
        #   |           |  |    |    /        \\    |    |  /    /   |    |    #
        #   |___     ___|  |    |   /   ____   \\   |    | /    /    |    |    #
        #       |    |     |    |  |   /    \\   |  |    |/    /     |    |    #
        #       |    |     |    |  |  |      |  |  |         /      |    |    #
        #       |    |     |    |  |  |      |  |  |         \\      |    |    #
        #       |    |     |    |  |  |      |  |  |    |     \\     |    |    #
        #       |    `._   |    |  |   \\____/   |  |    |\\     \\    |    |    #
        #       \\       |  |    |   \\          /   |    | \\     \\   |    |    #
        #        `._____|  |____|    \\________/    |____|  \\_____\\  |____|    #
        #                                                                     #
        #                                                                     #
        # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
		TIOKI
		echo tioki, nil
	end
end

# Begin CLI Menu
begin
	# Run the command
	DeployCLI.new.send(command, *CLIargs)
rescue => StopDeploy
rescue => e

	# If debug raise the exception
	raise e if debug

	#echo "There was no command called #{command}!\n"
	puts "\n"
	echo '####################', 'red'
	echo 'Rubber Deploy - Help', 'red'
	echo '####################', 'red'
	echo './script/deploy logs [staging|production]             # Tail the server logs', 'red'
	echo './script/deploy update [staging|production]           # Installs / Updates all packages and gems as well as stages new code from publishing', 'red'
	echo './script/deploy publish [staging|production]          # Publishes pending code from `./script/deploy update`', 'red'
	echo './script/deploy rollback [staging|production]         # Rolls all [staging|production] servers back to the previously live codebase', 'red'
	echo './script/deploy create <staging|production> [alias]   # Creates a new server in [staging|production] mode. With the specified alias.', 'red'
	echo './script/deploy create_staging                        # Creates a staging server', 'red'
	echo './script/deploy rake <staging|production> <command>   # Runs rake task on server. Command should be task without preceding "rake".', 'red'
	echo './script/deploy setup                                 # Installs / Updates Rubber and syncs /etc/hosts aliases', 'red'
	echo './script/deploy prep                                  # Runs Bundle Install + Rake Assets and DB Migrate', 'red'
	echo './script/deploy memory <staging|production>           # Shows memory statistics about all servers', 'red'
	puts "\n"
end

echo "Done... Exiting...\n"
