#!/usr/bin/env ruby

# Output to terminal
def echo(text, color = 'green', _sleep = nil)
	color_code = "31" if color == 'red'
	color_code = "32" if color == 'green'
	puts "\e[#{color_code}m#{text}\e[0m"
	sleep _sleep unless _sleep.nil? || !_sleep.is_a?(Integer)
end

# Confirm the message
def confirm(text, color = 'red')
	echo text + " [y/N]", color
	yesno = STDIN.gets.chomp
	if !yesno.empty? && yesno[0].downcase == "y"
		return true
	else
		return false
	end
end

# Load serialization engine
require 'yaml'
require 'socket'

# Start by getting the command line arguments
CLIargs = ARGV

class DeployCLI

	def update(type = "staging")

		# Capture terminal logs
		logs = Array.new

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		if confirm "Would you like to bootstrap the boxes? (Update OS and Main Gems)"
			# Boot strap the boxes
			echo "Bootstrapping the EC2 instances."
			echo "(Installing new Software/Gems)"
			echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
			echo "This may take awhile...\n"
			system('cap rubber:bootstrap FILTER=-tools')
		end

		# Deploy the code run assets
		echo "\nCopying the rails app to the server and deploying."
		echo "(Runs rake assets:precompile on finish)"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"
		system('cap deploy:cold FILTER=-tools')

		# Run DB Migrate
		echo "\nMigrating database"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"
		system('COMMAND="db:migrate" cap rubber:rake FILTER=-tools')

		# Launch new code
		echo "\nThe new code is on the server and everything is ready to go."
		if confirm "Would you like to publish now?"
			echo "This may take awhile...\n"
			system('cap deploy:create_symlink FILTER=-tools')
			system('cap rubber:passenger_nginx:restart FILTER=-tools')
			echo "The new code is now live. You can rollback by running:"
			echo "\`./script/deploy rollback #{type}\`", 'red'
		else
			echo "\nYou can deploy later with:"
			echo "\`./script/deploy publish #{type}\`", 'red'
		end

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment

		# Write to log
		dir = File.expand_path(File.dirname(__FILE__)) + '/deploy_logs'
		Dir.mkdir(dir) unless File.exists?(dir)
		File.open(dir + "/update_#{type}_#{Time.now.to_i}", 'w') do |f|
			f.write(YAML::dump(logs))
		end
	end

	def publish(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Notice
		echo "Publishing the latest revision of code on all #{type} servers."
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"

		# Do It Now
		system('cap deploy:create_symlink FILTER=-tools')
		system('cap rubber:passenger_nginx:restart FILTER=-tools')

		# Remind
		echo "\nThe new code is now live. You can rollback by running:"
		echo "\`./script/deploy rollback #{type}\`", 'red'

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def rollback(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Notice
		echo "Rolling back to the last published code bade on all #{type} servers."
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"

		# Do It Now
		system('cap deploy:rollback:code FILTER=-tools')
		system('cap rubber:passenger_nginx:restart FILTER=-tools')

		# Notify
		echo "\nThe old code is now live."

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def create_staging
		return self.create('staging', nil)
	end

	def create(type = 'staging', _alias = nil)

		# Set alias if nil
		_alias = 'staging_' + Socket.gethostname + '_' + Time.now.to_i.to_s[-4,4].gsub('.','') if _alias.nil?

		# Capture terminal logs
		logs = Array.new

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Boot strap the boxes
		echo "Bootstrapping/Launching the EC2 instances."
		echo "(Creating Server, Installing new Software/Gems, Compiling assets, Migrating DB)"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "This may take awhile...\n"
		ENV['ALIAS'] = _alias
		ENV['ROLES'] = 'web,app,db:primary=false'
		system('cap rubber:create')
		system('cap rubber:bootstrap FILTER=-tools')
		system('cap deploy:cold FILTER=-tools')

		# Restore the original rails env
		echo "\n\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment

		# Write to log
		dir = File.expand_path(File.dirname(__FILE__)) + '/deploy_logs'
		Dir.mkdir(dir) unless File.exists?(dir)
		File.open(dir + "/create_staging_#{type}_#{Time.now.to_i}", 'w') do |f|
			f.write(YAML::dump(logs))
		end
	end

	def logs(type = 'staging')

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		# Explain Exit
		echo "Type (CTRL + C) to exit when you are done", 'red', 2

		# Tail the logs
		system('cap rubber:tail_logs FILTER=-tools')

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

	def destroy
		echo "If you really want to destroy a server please do it manually.", 'red'
	end

	def setup

		# Warn
		echo "Ok were gonna install the latest rubber, bundle install, and then sync aliases ^_^"
		echo "You have 5 seconds to cancel with (CTRL + C)", 'red', 5
		echo "Here we go! This could take awhile...\n"

		# Install specific install
		system('sudo gem install specific_install')

		# Install Rubber
		system('sudo gem specific_install -l git://github.com/wr0ngway/rubber.git')

		# Bundle Install
		system('bundle install && bundle update')

		# Sync aliases
		renvironment = ENV['RAILS_ENV']
		['development', 'staging','production'].each do |_env|
			ENV["RAILS_ENV"] = _env
			system('cap rubber:setup_local_aliases')
		end; ENV["RAILS_ENV"] = renvironment

		echo "That should be everything! ^_^"
	end

	def prep

		# Warn
		echo "Ok so were gonna bundle install your Gemfile and rake assets and db migrate. Lets go!"
		if confirm "Everything sound good?"

			# Bundle Install/Update
			system('bundle install && bundle update')

			# Rake Assets
			system('rake assets:precompile')

			# Rake DB
			system('rake db:migrate')

			echo "\nFinished Prep...", 'red'
		else
			echo "\nCancelled...", 'red'
		end
	end

	def rake(type = 'staging', command = nil)

		# If no command given then exit
		return echo "No rake task given." if command.nil? || !command.is_a?(String)

		# Save the current rails environment
		renvironment = ENV["RAILS_ENV"]

		# Set the new rails environment
		echo "Setting the rails environment to #{type}...\n"
		ENV["RAILS_ENV"] = type

		if confirm "Confirm you want to run \`rake #{command}\`..."
			ENV["COMMAND"] = command
			system('cap rubber:rake FILTER=-tools')
			echo "\nFinished..."
		else
			echo "\nCancelled..."
		end

		# Restore the original rails env
		echo "\nFinished! Restoring the environment to #{renvironment}..."
		ENV["RAILS_ENV"] = renvironment
	end

end

# Get the command to run
command = CLIargs.shift

begin
	# Run the command
	DeployCLI.new.send(command, *CLIargs)
rescue
	#echo "There was no command called #{command}!\n"
	puts "\n"
	echo '####################', 'red'
	echo 'Rubber Deploy - Help', 'red'
	echo '####################', 'red'
	echo './script/deploy logs [staging|production]             # Tail the server logs', 'red'
	echo './script/deploy update [staging|production]           # Installs / Updates all packages and gems as well as stages new code from publishing', 'red'
	echo './script/deploy publish [staging|production]          # Publishes pending code from `./script/deploy update`', 'red'
	echo './script/deploy rollback [staging|production]         # Rolls all [staging|production] servers back to the previously live codebase', 'red'
	echo './script/deploy create <staging|production> [alias]   # Creates a new server in [staging|production] mode. With the specified alias.', 'red'
	echo './script/deploy create_staging                        # Creates a staging server', 'red'
	echo './script/deploy rake <staging|production> <command>   # Runs rake task on server. Command should be task without preceding "rake".', 'red'
	echo './script/deploy setup                                 # Installs / Updates Rubber and syncs /etc/hosts aliases', 'red'
	echo './script/deploy prep                                  # Runs Bundle Install + Rake Assets and DB Migrate', 'red'
	puts "\n"
end

echo "Done... Exiting...\n"
